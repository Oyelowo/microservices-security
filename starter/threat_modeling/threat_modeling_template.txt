Docker Threat Modeling
Given Docker's system components and the STRIDE framework, identify five potential threats that may arise.

Spoofing: 
Due to the lack of encryption of the the docker client communication to the docker daemon or 
docker registry, the api call could be intercepted by man-in-the-middle attack.

The sqli application is served over unencrypted port 8080 which exposes us to the 
man-in-the-middle attack and traffic can as such be hijacked by an attacker by intercepting requests
from the client to the server.

Tampering: 
The attacker can access the docker image and access confidential credentials for
accessing our database and redis server as seen in `vuln_app/config/dev.yaml` which is
used to initialize the application.
With this, the attacker can tamper with our data.

Also, with access to our application, the attacker can notice that users queries are performed directly
without proper query sanitization which could expose us to sql injection and users could drop our tables 
amongst other things.
Such queries can be found in `vuln_app/sqli/dao` 
e.g in ` 'SELECT id, name FROM students WHERE id = %s',` below, an attacker can drop the student table
by passing dangerous invalid id as queries to drop our table, for instance if id is `1'); DROP TABLE students; --`,
then the query becomes `SELECT id, name FROM students WHERE id = 1'); DROP TABLE students; --`.
This could cause our table to be dropped and all our queries are vulnerable to this attack as the queries inputs are not 
being validated nor sanitized.

```py
class Student(NamedTuple):
    id: int
    name: str

    @classmethod
    def from_raw(cls, raw: tuple):
        return cls(*raw) if raw else None

    @staticmethod
    async def get(conn: Connection, id_: int):
        async with conn.cursor() as cur:
            await cur.execute(
                'SELECT id, name FROM students WHERE id = %s',
                (id_,),
            )
            r = await cur.fetchone()
            return Student.from_raw(r)
```



Repudiation:
Since our application is prone to man-in-the-middle attack, students and admin sessions could
be hijacked with unintended actions and consequences.

Information Disclosure: 
As the database is prone to SQL injection attacks, and also the application not
having proper access control layers, unauthorized users are able to access information and 
potentially reveal users information including their password hashes.

Denial of Service: 
Because we are not allocating/limiting memory usage to the containers, this may lead to over-allocation
to the app container when attacking routes huge traffic to the container causing the service to crash and be unavailable.
Although the application would be behind a load balancer, attackers could render it unavailable
due to the lack of rate limiting and firewall security implementations.

The application is behind a load balancer, which may provide some denial of service protection. However, that's not the dedicated focus for a load balance. Lack of purpose-built rate-limiting or denial of service protection could result in exhausting resources needed to provide the service and lead to an outage.

Elevation of Privilege: 
As user is not specified in the dockerfile, it gives root user privilege which gives
access to any container running within same pod e.g if we decide to run redis as a sidecar to
our main application.
An attacker may also take advantage of the vulnerable to SQL attack to make a user an administrator
and thus, escalate their privilege to carry out unauthorized activities.




Kubernetes Threat Modeling
Given Kubernetes' system components and the STRIDE framework, identify five potential threats that may arise.

Spoofing: 
An attacker could intercept calls to our api-server if it is not encrypted with the transaction layer protocol.
With this, they can gain access to our cluster and wreck havoc.
Similarly, the api-servevr call on the master plane to the kubelet on worker plane
could be intercepted but can be prevented by implementing trustless security protocol such as TLS.
Call between services can also be spoofed and this can be mitigated by implementing trustless mutual TLS
between services. Such is provided by service meshes like linkerdi and Istio.

Tampering: 
An attacker could modify data in the datastore such as the etcd or sqlite(in the case of default k3s configuration),
and indirection affect the behavior of our our cluster and even cause misconfiguration.
This could be mitigated by limiting or retricting user access to others to be at most read-only and prevent write or execution
rights.

Repudiation: 
An attacker can also make unauthorized changes to the api-server and kubelet silently causing 
issues that might go unknown for a long time or ever especially if proper logging and monitoring systems
are not put in place. 

Information Disclosure: 
Information in the datastore can be exposed if calls from the api-server to the store is not secured or encrypted.
Access to the kubeconfig should also be restricted to be less permissive.
An attacker could also access unencrypted information hardcoded into config file, secret or even in containers
running on pods.

Denial of Service: 
The kube api-server can be overloaded and overwhelemed if not protected. An attacker may also 
intercept and cause the api-server to schedule a pod incorrectly or even over allocate resources
thereby starving the host and leading to an outage or wastage of resources.
The lack of upper limit in kubernetes by default of when not imposed within deployments can also 
lead to starvation of resources on the host machine.


Elevation of privilege:
The kube api-server and the kubelet in the worker node can be susceptible to elevation of privilege if the 
privileged flag is used. We want to limit the authorization of control.


Docker-bench Run Results and Analysis
From the failed findings, select and document 3 findings from the Docker-bench results 
that you want to harden based on the 5 attack surface areas you identified in Step 1. 
At least 1 of the 3 hardened findings should be different from the ones mentioned in 
the exercise (i.e. 5.10, 5.14, and 5.22).

Addressed
[FAIL] 2.1 Ensure network traffic is restricted between containers on the default bridge (Scored)
[FAIL] 5.12 Ensure that the container's root filesystem is mounted as read only (Scored)
[FAIL] 5.13 Ensure that incoming container traffic is bound to a specific host interface (Scored)
[FAIL] 2.2.b Ensure the logging level is set to 'info' (Scored)



docker build . -t oyelowo/udacitysecurity:hardened-v1.0 -m 256mb --no-cache=true --cpu-shares 512 


docker run -it --security-opt=no-new-privileges --restart=on-failure:5 oyelowo/udacitysecurity:hardened-v1.0 bash


I set logging level to info

Profile Applicability:
ï‚· Level 1 - Docker - Linux
Description:
Set Docker daemon log level to info.
Rationale:
Setting up an appropriate log level, configures the Docker daemon to log events that you
would want to review later. A base log level of info and above would capture all logs
except debug logs. Until and unless required, you should not run Docker daemon at debug
log level.
Audit:
To confirm this setting a combination of reviewing the dockerd start-up options and a
review of any settings in /etc/docker/daemon.json should be completed.
To review the dockerd startup options, use:
ps -ef | grep dockerd
Ensure that either the --log-level parameter is not present or if present, then it is set to
info.
The contents of /etc/docker/daemon.json should also be reviewed for this setting.
Remediation:
Ensure that the Docker daemon configuration file has the following configuration included
"log-level": "info"
Alternatively, run the Docker daemon as below:
dockerd --log-level="info"
Impact:
None.



docker run --rm -it --tty --cpu-shares 512 --security-opt=no-new-privileges oyelowo/udacitysecurity:hardened-v1.0 bash

# docker run --rm -it --tty --memory 256m --security-opt=no-new-privileges oyelowo/udacitysecurity:hardened-v1.0 bash


TODO:

```sh
docker build . -t opensuse/leap:latest -m 256mb --no-cache=true
```

```
./docker-bench --benchmark cis-1.2 | grep FAIL  
```

If it comes back with nothing, it means it is not enabled
```
echo $DOCKER_CONTENT_TRUST 

# enable it
export DOCKER_CONTENT_TRUST=1
```

Solution: Memory usage:
```
docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: Memory={{
.HostConfig.Memory }}'

If this command returns 0, it means that memory limits are not in place; if it returns a nonzero value, it means that they are in place.

b0c335d7655094ce4cc45660a8cc9521a86678aade3c99c9bff95e25c1fdc596: Memory=0
668e34912118528adccdd58dd26d80f35f0f677c84e2614576241390a0ccc1cc: Memory=0
8a4d5d83679f546e965e31b48aaa117627daf9501504fbe7838bc1df5c8bd12a: Memory=0
363b799ff42a2e37b57d25137ab33c1b7acbb96b3e79b0a3b7626a3972356e33: Memory=0
1c8e50aa1f5d918a0920b4a9376d5a526378fbc73ce22800a20dd7bb65c1a6a4: Memory=0
41d69e0dad870e263efbdc7a77ee251e81273e3ddaa488c12397bdd6cb8659fb: Memory=0
49a4ff1e3dab759c32fcef1df2027bded65f317581d6fdb25b36ab1e8a549516: Memory=0
1db19fc75e0e1202f8073f82a0a739f1be2e212d75de3e13dbd27d06918a71d0: Memory=0
14bab694b217228f4aae02ae09d26ff2dd495681c578c9d866f876541951433c: Memory=0


Remediation:
You should run the container with only as much memory as it requires by using the --
memory argument.
For example, you could run a container using the command below:
docker run --interactive --tty --memory 256m centos /bin/bash
In the example above, the container is started with a memory limit of 256 MB.
Note that the output of the command below returns values in scientific notation if memory
limits are in place.
docker inspect --format='{{.Config.Memory}}' 7c5a2d4c7fe0

For example, if the memory limit is set to 256 MB for a container instance, the output of the
command above would be 2.68435456e+08 and NOT 256m. You should convert this value
using a scientific calculator.
Impact:
If correct memory limits are not set on each container, one process can expand its usage
and cause other containers to run out of resources.
Default Value:
By default, all containers on a Docker host share their resources equally and no memory
limits are enforced
```



2. Ensure that registry certificate file ownership is set to root:rootdocker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: Memory={{
.HostConfig.Memory }}'
NB:  Docker CIS benchmark defines a standard to harden the docker daemon, host, and engine.
Docker-bench runs tests against the CIS framework, test are configured in YAML, and provides feedback on controls.
Docker-bench should be run during the build phase of the SDLC.

### Protecting docker host 
Drop all capabilities using --cap-drop=all
Use SELinux in enforcing mode once tested,
D not use the --privileged flag

### Protecting docker image security
image hardening
image signing
verifying public images

### Protecting client:
Hardening the host system
Running thelatest patched bersion of docker 
Running anti-virus & endpoint detection and response (EDR) software.

NB: docker build is run in root privileged.
Docker daemon needs to create namespaces for isolation.
e.g 
1. Harden the host system
2. Upgrade  client to the latest patched version,
3. Use Antivirus & Endpoint detection and response (EDR) software to detect malicious processes and respond.
This monitors for and alerts of suspicious processes. e.g Commercial examples include Crowdstrike Falcon and Carbon Black Response.
4. Avoid using the --privileged flag

Securing the image registry
Image hardening, using secured vault like hashicorp security vault.
Only use verifiable and trusted image,
Image signing and ideally having Docker content trust can sevre as antispoofing control and validate authenticity of the images.

Check image digest and compare with the image digest of the SHA256 providded in the image repository.
