Docker and App Threat Modeling

Spoofing: 
Due to the lack of encryption of the the docker client communication to the docker daemon or 
docker registry, the api call could be intercepted by man-in-the-middle attack.

The sqli application is served over unencrypted port 8080 which exposes us to the 
man-in-the-middle attack and traffic can as such be hijacked by an attacker by intercepting requests
from the client to the server.

Tampering: 
The attacker can access the docker image and access confidential credentials for
accessing our database and redis server as seen in `vuln_app/config/dev.yaml` which is
used to initialize the application.
With this, the attacker can tamper with our data.

Also, with access to our application, the attacker can notice that users queries are performed directly
without proper query sanitization which could expose us to sql injection and users could drop our tables 
amongst other things.
Such queries can be found in `vuln_app/sqli/dao` 
e.g in ` 'SELECT id, name FROM students WHERE id = %s',` below, an attacker can drop the student table
by passing dangerous invalid id as queries to drop our table, for instance if id is `1'); DROP TABLE students; --`,
then the query becomes `SELECT id, name FROM students WHERE id = 1'); DROP TABLE students; --`.
This could cause our table to be dropped and all our queries are vulnerable to this attack as the queries inputs are not 
being validated nor sanitized.

```py
class Student(NamedTuple):
    id: int
    name: str

    @classmethod
    def from_raw(cls, raw: tuple):
        return cls(*raw) if raw else None

    @staticmethod
    async def get(conn: Connection, id_: int):
        async with conn.cursor() as cur:
            await cur.execute(
                'SELECT id, name FROM students WHERE id = %s',
                (id_,),
            )
            r = await cur.fetchone()
            return Student.from_raw(r)
```



Repudiation:
Since our application is prone to man-in-the-middle attack, students and admin sessions could
be hijacked with unintended actions and consequences.

Information Disclosure: 
As the database is prone to SQL injection attacks, and also the application not
having proper access control layers, unauthorized users are able to access information and 
potentially reveal users information including their password hashes.

Denial of Service: 
Because we are not allocating/limiting memory usage to the containers, this may lead to over-allocation
to the app container when attacking routes huge traffic to the container causing the service to crash and be unavailable.
Although the application would be behind a load balancer, attackers could render it unavailable
due to the lack of rate limiting and firewall security implementations.

The application is behind a load balancer, which may provide some denial of service protection. However, that's not the dedicated focus for a load balance. Lack of purpose-built rate-limiting or denial of service protection could result in exhausting resources needed to provide the service and lead to an outage.

Elevation of Privilege: 
As user is not specified in the dockerfile, it gives root user privilege which gives
access to any container running within same pod e.g if we decide to run redis as a sidecar to
our main application.
An attacker may also take advantage of the vulnerable to SQL attack to make a user an administrator
and thus, escalate their privilege to carry out unauthorized activities.




Kubernetes Threat Modeling

Spoofing: 
An attacker could intercept calls to our api-server if it is not encrypted with the transaction layer protocol.
With this, they can gain access to our cluster and wreck havoc.
Similarly, the api-servevr call on the master plane to the kubelet on worker plane
could be intercepted but can be prevented by implementing trustless security protocol such as TLS.
Call between services can also be spoofed and this can be mitigated by implementing trustless mutual TLS
between services. Such is provided by service meshes like linkerdi and Istio.

Tampering: 
An attacker could modify data in the datastore such as the etcd or sqlite(in the case of default k3s configuration),
and indirection affect the behavior of our our cluster and even cause misconfiguration.
This could be mitigated by limiting or retricting user access to others to be at most read-only and prevent write or execution
rights.

Repudiation: 
An attacker can also make unauthorized changes to the api-server and kubelet silently causing 
issues that might go unknown for a long time or ever especially if proper logging and monitoring systems
are not put in place. 

Information Disclosure: 
Information in the datastore can be exposed if calls from the api-server to the store is not secured or encrypted.
Access to the kubeconfig should also be restricted to be less permissive.
An attacker could also access unencrypted information hardcoded into config file, secret or even in containers
running on pods.

Denial of Service: 
The kube api-server can be overloaded and overwhelemed if not protected. An attacker may also 
intercept and cause the api-server to schedule a pod incorrectly or even over allocate resources
thereby starving the host and leading to an outage or wastage of resources.
The lack of upper limit in kubernetes by default of when not imposed within deployments can also 
lead to starvation of resources on the host machine.


Elevation of privilege:
The kube api-server and the kubelet in the worker node can be susceptible to elevation of privilege if the 
privileged flag is used. We want to limit the authorization of control.


Docker-bench Run Results and analysis

Addressed
[FAIL] 2.1 Ensure network traffic is restricted between containers on the default bridge (Scored)
[FAIL] 5.12 Ensure that the container's root filesystem is mounted as read only (Scored)
[FAIL] 5.13 Ensure that incoming container traffic is bound to a specific host interface (Scored)
[FAIL] 2.2.b Ensure the logging level is set to 'info' (Scored)
